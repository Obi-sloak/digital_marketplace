#pragma version 10

smart_contracts.digital_marketplace.contract.DigitalMarketplace.approval_program:
    // smart_contracts/digital_marketplace/contract.py:4
    // class DigitalMarketplace(ARC4Contract):
    method "createApplication(asset,uint64)void"
    method "setPrice(uint64)void"
    method "optInToAsset(pay)void"
    method "buy(pay,uint64)void"
    method "deleteApplication()void"
    txna ApplicationArgs 0
    match main_createApplication_route@1 main_setPrice_route@2 main_optInToAsset_route@3 main_buy_route@4 main_deleteApplication_route@5
    err // reject transaction

main_createApplication_route@1:
    // smart_contracts/digital_marketplace/contract.py:7-8
    // # Create the app
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/digital_marketplace/contract.py:4
    // class DigitalMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // smart_contracts/digital_marketplace/contract.py:7-8
    // # Create the app
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    callsub createApplication
    int 1
    return

main_setPrice_route@2:
    // smart_contracts/digital_marketplace/contract.py:13-14
    // # Update the listing price
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:4
    // class DigitalMarketplace(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/digital_marketplace/contract.py:13-14
    // # Update the listing price
    // @arc4.abimethod
    callsub setPrice
    int 1
    return

main_optInToAsset_route@3:
    // smart_contracts/digital_marketplace/contract.py:20-21
    // # Opt in to the asset that will be sold
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:4
    // class DigitalMarketplace(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/digital_marketplace/contract.py:20-21
    // # Opt in to the asset that will be sold
    // @arc4.abimethod
    callsub optInToAsset
    int 1
    return

main_buy_route@4:
    // smart_contracts/digital_marketplace/contract.py:35-36
    // # Buy the asset
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/digital_marketplace/contract.py:4
    // class DigitalMarketplace(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/digital_marketplace/contract.py:35-36
    // # Buy the asset
    // @arc4.abimethod
    callsub buy
    int 1
    return

main_deleteApplication_route@5:
    // smart_contracts/digital_marketplace/contract.py:49-50
    // # Delete the application
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub deleteApplication
    int 1
    return


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.createApplication(assetId: uint64, unitaryPrice: uint64) -> void:
createApplication:
    // smart_contracts/digital_marketplace/contract.py:7-9
    // # Create the app
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    // def createApplication(self, assetId: Asset, unitaryPrice: UInt64) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:10
    // self.assetId = assetId.id
    byte "assetId"
    frame_dig -2
    app_global_put
    // smart_contracts/digital_marketplace/contract.py:11
    // self.unitaryPrice = unitaryPrice
    byte "unitaryPrice"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.setPrice(unitaryPrice: uint64) -> void:
setPrice:
    // smart_contracts/digital_marketplace/contract.py:13-15
    // # Update the listing price
    // @arc4.abimethod
    // def setPrice(self, unitaryPrice: UInt64) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:16
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:18
    // self.unitaryPrice = unitaryPrice
    byte "unitaryPrice"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.optInToAsset(mbrPay: uint64) -> void:
optInToAsset:
    // smart_contracts/digital_marketplace/contract.py:20-22
    // # Opt in to the asset that will be sold
    // @arc4.abimethod
    // def optInToAsset(self, mbrPay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/digital_marketplace/contract.py:23
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:24
    // assert not Global.current_application_address.is_opted_in(Asset(self.assetId))
    global CurrentApplicationAddress
    int 0
    byte "assetId"
    app_global_get_ex
    assert // check assetId exists
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/digital_marketplace/contract.py:26
    // assert mbrPay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:27
    // assert mbrPay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:29-33
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetId,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:30
    // xfer_asset=self.assetId,
    int 0
    byte "assetId"
    app_global_get_ex
    assert // check assetId exists
    // smart_contracts/digital_marketplace/contract.py:31
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/digital_marketplace/contract.py:32
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:29
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:29-33
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetId,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.buy(buyerTxn: uint64, quantity: uint64) -> void:
buy:
    // smart_contracts/digital_marketplace/contract.py:35-37
    // # Buy the asset
    // @arc4.abimethod
    // def buy(self, buyerTxn: gtxn.PaymentTransaction, quantity: UInt64) -> None:
    proto 2 0
    // smart_contracts/digital_marketplace/contract.py:38
    // assert self.unitaryPrice != UInt64(0)
    int 0
    byte "unitaryPrice"
    app_global_get_ex
    assert // check unitaryPrice exists
    assert
    // smart_contracts/digital_marketplace/contract.py:39
    // assert Txn.sender == buyerTxn.sender
    txn Sender
    frame_dig -2
    gtxns Sender
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:40
    // assert buyerTxn.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:41
    // assert buyerTxn.amount == self.unitaryPrice * quantity
    frame_dig -2
    gtxns Amount
    int 0
    byte "unitaryPrice"
    app_global_get_ex
    assert // check unitaryPrice exists
    frame_dig -1
    *
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:43-47
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetId,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:44
    // xfer_asset=self.assetId,
    int 0
    byte "assetId"
    app_global_get_ex
    assert // check assetId exists
    // smart_contracts/digital_marketplace/contract.py:45
    // asset_receiver=Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:43
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:43-47
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetId,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.digital_marketplace.contract.DigitalMarketplace.deleteApplication() -> void:
deleteApplication:
    // smart_contracts/digital_marketplace/contract.py:49-51
    // # Delete the application
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def deleteApplication(self) -> None:
    proto 0 0
    // smart_contracts/digital_marketplace/contract.py:52
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/digital_marketplace/contract.py:54-59
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetId,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:55
    // xfer_asset=self.assetId,
    int 0
    byte "assetId"
    app_global_get_ex
    assert // check assetId exists
    // smart_contracts/digital_marketplace/contract.py:56
    // asset_receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/digital_marketplace/contract.py:58
    // asset_close_to=Global.creator_address,
    dup
    itxn_field AssetCloseTo
    // smart_contracts/digital_marketplace/contract.py:57
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/digital_marketplace/contract.py:54
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:54-59
    // itxn.AssetTransfer(
    //     xfer_asset=self.assetId,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address,
    // ).submit()
    itxn_submit
    // smart_contracts/digital_marketplace/contract.py:61-65
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address
    // ).submit()
    itxn_begin
    // smart_contracts/digital_marketplace/contract.py:62
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/digital_marketplace/contract.py:64
    // close_remainder_to=Global.creator_address
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/digital_marketplace/contract.py:63
    // amount=0,
    int 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/digital_marketplace/contract.py:61
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // smart_contracts/digital_marketplace/contract.py:61-65
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address
    // ).submit()
    itxn_submit
    retsub
